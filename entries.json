{
	"entries":[
		{
		"date":"03/12/2015",
		"title":"Hello world",
		"text":"I started blogging today!"
		},
		{
		"date":"03/13/2015",
		"title":"Second entry",
		"text":"And so it goes..."
		},
        
        {
		"date":"6/1/2015",
		"title":"First day of class",
		"text":"Tools used today:<br>Drop-Box -- Cloud storage for our programs and future work.<br>Portal.Microsoft.com -- All your typical MS programs. Word, Excel, Outlook.<br>MS Dreaksparks -- A copy of each of the MS programs. Like Winidows 7/8/10, Office, XNA, etc.<br>Stack Overflow.com -- Good source for Programming Q/A<br>Git Hub -- Source control location with cloud repositories<br>Notepad++ -- Programming editor. Uses a nice set of syntax coloring options for many languages.<br><br><br><br>Lab 1: Twitter Spam Bot Project Set-up:<br>Dev account<br>-Dev.twitter.com<br>-Standard user login (note, Need a valid email address and valid phone number - More on this Later)<br>-Bottom of the dev page is a button called \"Manage Applications\"<br>-Create Applications<br><br>Python/Twitter API - Tweepy:<br>New Command for me: PIP install Tweepy<br>I don't know much about the command yet but it ends up working a bit like Linux's Apt-Get repositories. I'm not sure if it functions exactly the same, but it has a simlar feel.<br><br>Twitter requires security keys before it will let a program post to the twitter account. These keys can be stored directly in the file, but if you put it on a public source control like Git Hub, people can skim these numbers.<br>A better solution is to put it in a separate python file, import it like any other import, and use a dictionary for the key look-up. Then DO NOT REVISION CONTROL this file. DON'T DO IT. Add it to git's ignore list. If you need to, but a blank key file into the repository so that anyone that forks it can understand how it works.<br><br>New Commands:<br>fileVar = open('filename.txt','r') # Opens as Read only. Locks the file so that new addition while the program are running, are not added.<br>fileVar.Close # Closes and releases the file for R/W again.<br>s = api.update_status(status = m, in_reply_to_statusid = tweet.id)<br><br><br><br>Lab 2: Git Set-up:<br>I think I finally have my head wrapped around it.<br>Best results I got from Building the Repo in Git-Hub first. Then CLONE/PULL the repo from Git-Hub, and it should load onto the the machine. Source Tree seemed to work the best for me. when I cloned it, it asked me where to save it.<br> <br> Each project should be it's own repository.<br> You should commit anytime you have solved a problem or come up with a good piece. You probably should not commit when something isn't working. Solve one problem. Commit, solve the next, commit, etc.<br> In collaboration with others, when you try to merge the files from two different users, it seems to work well - but sometimes you may have to manually edit and sort through it.<br> <br> Recommended procedure to try to prevent errors: 1. Commit my changes locally. 2. Pull Repository from the rest of the collective repository for everyone elses changes. 3. Push final changes up to the group repository.<br> <br> Git ignore file is a list of file extensions and specific files that Git will ignore during the commit/push process (like the twitter key example).<br> <br> New git command line Commands:<br> git init - starts the repository<br> git add <filename.txt> - adds a file to repository<br> git status - self explanatory<br> git log - shows previous commits<br> git commit -m \"Comment\" - commits with a recorded message<br> git remote add origin <\"https:\\ github repository\"> - Not sure. I think this one adds files to the git-hub repository, or else creates the git-hub repository<br> git push -u origin master - Pushes the repository to git-hub, -u remembers it as the default<br> git pull origin master - pulls the git-hub repository to local<br> git diff HEAD - checks the differences between the repository and staged, -HEAD shows the most recent commit. Seems to need to be capitalized<br> git diff --staged - shows changes in the staged area<br> git reset filename - rolls back a staged file<br> git checkout -- filename - recheckouts a file, overwriting the \"in-progress version\" (I think)<br> git branch <branch name> - creates a branch<br> git branch - shows existing branches<br> git checkout <branch name> - makes the other branch the active branch<br> git rm '*.txt' - deletes all the txt files (seems to follow linux commands)<br> git merge <branch name> - merges the branch into the active branch<br> git branch -d <branch name> - deletes a branch<br>"
        }
        
        
        
        
        
	]
}