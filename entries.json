{
	"entries":[
        
        {
		"date":"6/1/2015",
		"title":"First day of class",
		"text":"Tools used today:<br>Drop-Box -- Cloud storage for our programs and future work.<br>Portal.Microsoft.com -- All your typical MS programs. Word, Excel, Outlook.<br>MS Dreamsparks -- A copy of each of the MS programs. Like Winidows 7/8/10, Office, XNA, etc.<br>Stack Overflow.com -- Good source for Programming Q/A.<br>Git Hub -- Source control location with cloud repositories.<br>Notepad++ -- Programming editor. Uses a nice set of syntax coloring options for many languages.<br><br><br>Lab 1: Twitter Spam Bot Project Set-up:<br>To create a twitter development account<br>-Dev.twitter.com<br>-Standard user login (note: Need a valid email address and valid phone number on creation. Google Voice will work for this.)<br>-At the bottom of the dev page is a link called \"Manage Applications\"<br>-Create a new applications to get your authorization keys<br><br>Python/Twitter API - Tweepy:<br>New Command for me: PIP install Tweepy<br>I don't know much about the command yet but it ends up working a bit like Linux's Apt-Get repositories. I'm not sure if it functions exactly the same, but it has a simlar feel.<br><br>Twitter requires security keys before it will let a program post to the twitter account. These keys can be stored directly in the file, but if you put it on a public source control like Git Hub, people can skim these numbers.<br>A better solution is to put it in a separate python file, import it like any other import, and use a dictionary for the key look-up. Then DO NOT REVISION CONTROL this file. DON'T DO IT. Add it to git's ignore list. If you need to, but a blank key file into the repository so that anyone that forks it can understand how it works.<br><br>New Commands:<br>fileVar = open('filename.txt','r') # Opens as Read only. Locks the file so that new addition while the program are running, are not added.<br>fileVar.Close # Closes and releases the file for R/W again.<br>s = api.update_status(status = m, in_reply_to_statusid = tweet.id)<br><br><br><br>Lab 2: Git Set-up:<br>I think I finally have my head wrapped around it.<br>Best results I got from Building the Repo in Git-Hub first. Then CLONE/PULL the repo from Git-Hub, and it should load onto the the machine. Source Tree seemed to work the best for me. when I cloned it, it asked me where to save it.<br> <br> Each project should be it's own repository.<br> You should commit anytime you have solved a problem or come up with a good piece. You probably should not commit when something isn't working. Solve one problem. Commit, solve the next, commit, etc.<br> In collaboration with others, when you try to merge the files from two different users, it seems to work well - but sometimes you may have to manually edit and sort through it.<br> <br> Recommended procedure to try to prevent errors: 1. Commit my changes locally. 2. Pull Repository from the rest of the collective repository for everyone elses changes. 3. Push final changes up to the group repository.<br> <br> Git ignore file is a list of file extensions and specific files that Git will ignore during the commit/push process (like the twitter key example).<br> <br> New git command line Commands:<br> git init - starts the repository<br> git add <filename.txt> - adds a file to repository<br> git status - self explanatory<br> git log - shows previous commits<br> git commit -m \"Comment\" - commits with a recorded message<br> git remote add origin <\"https:\\ github repository\"> - Not sure. I think this one adds files to the git-hub repository, or else creates the git-hub repository<br> git push -u origin master - Pushes the repository to git-hub, -u remembers it as the default<br> git pull origin master - pulls the git-hub repository to local<br> git diff HEAD - checks the differences between the repository and staged, -HEAD shows the most recent commit. Seems to need to be capitalized<br> git diff --staged - shows changes in the staged area<br> git reset filename - rolls back a staged file<br> git checkout -- filename - recheckouts a file, overwriting the \"in-progress version\" (I think)<br> git branch <branch name> - creates a branch<br> git branch - shows existing branches<br> git checkout <branch name> - makes the other branch the active branch<br> git rm '*.txt' - deletes all the txt files (seems to follow linux commands)<br> git merge <branch name> - merges the branch into the active branch<br> git branch -d <branch name> - deletes a branch<br>"
        },
        {
        "date":"6/2/2015",
		"title":"Programming Basics",
        "text":"New Tools we used today:<br>- iPython Notebook -- we use this to open up our labs and lessons for the day<br>- Notepad ++ -- Remember, change the Save-As file type to .py not default .txt<br><br>Book Sources:<br>- www.pythonlearn.com/book -- Community Commons licensed (free use, with acknowledgement) text book from UMichigan.<br><br>Best Practices:<br>- Print statements preferred to use the ()<br>- Also prefers to use Double Quote (\") over single quote.<br>- Obviously use comments, but you should code in such a way that you can tell whats going on, just by reading the code. Use MNemonic naming (ie. FirstNameofUser)<br>- Even if an equation doesnt need parenthesis, it is recommended that you put them in the way you want it processed, to clarify the code.<br><br>Discoveries:<br>- Lists have an automatic sort function list.sort(). <br>- it phisically modifies the list, rather than providing an output. So:<br>- print list.sort() returns None<br>* the correct form is:<br>\t- list.sort()<br>\t- print list<br><br>We did some testing today,<br>- Q: When does Python recognize when it needs to Float during an arithmetic operation? - A: As soon as it runs across a float: So...<br>- 4 / 5 - 5.0 = -5 (4/5 is integer match and truncates to 0)<br>- 4.0 / 5 - 5 = -.2 (because it converst it right away to float in the first operation)<br><br>I ran across this -- according to this website,<br>(http://www.mathcs.emory.edu/~valerie/courses/fall10/155/resources/op_precedence.html)<br>- when doing boolean logic, == comes before and/or<br>- so True and 1 == 0 is equivalent to [True and (1==0)].<br>- also And takes priority over Or<br>- So True and False or False is equivalent to [(True and False) or False]<br><br>New Concepts discussed today:<br>Variables:<br>- Variable name must start with a letter or underscore<br>- may also contain numbers, but cannot start with a number<br>- Remember that they are always case sensitive: Apple != apple<br><br>Assignments and expressions:<br>- x = 2 is an assignment because it just just a constant 2<br>- x = x+2 is an assignment with an expression<br><br>Some new operators:<br>- ** Python uses the double (*) for exponents<br>- % Python uses the % for modulus (remainder after division)<br>BEMA = Order of Operations is Brackets, Exponents, Multiplication (and division), Addition (and subtraction), Left to Right<br><br>New commands:<br>- type(variable) - return the variable type (ie. int, str, etc.)<br>- type casting - forcing the variable into another type. (ie. intVar = int(floatVar)) <br>-float(var)<br>-int(var)<br>-str(var)<br>- Note, if you try to cast something that can't be done, it will crash (see Try: Except:)<br>- answer = raw_input(\"Prompt\") - Prompt the user for input from the keyboard<br>Try/Catch (except in python):<br>- try: - Surround a block of dangers code with a try block. If an error occurs, it will run the Except instead.<br>- except: - this would be the block that gets run if it fails<br>- if an error occurs, the try: block will still be run, up until the point where it actually fails. <br>- In otherwords, it doesn't pre-process the try block. it runs like normal until it hits the error, and then runs the except block from there.<br>- In most other languagess, it is called Try:/Catch:<br><br>Conditional Execution:<br>- Remember \"==\" (double equal) is the if statement. \"=\" (single equal) is the assignment<br>- != is not equal<br>- if (condition test):<br>- everything in that if-block is indented after the the colon (:)<br>- remember its elif NOT ElseIf<br>- if: elif: else:"
        },
        {
        "date":"6/3/2015",
		"title":"Python Projects",
        "text":"I worked on 3 main projects today. <br>1. Personal Project -- My first, built completely from scratch AI.(https://github.com/mkohlmann-he/AI_Test)<br>2. Previous exercise -- took my existing code and did some \"pre-filtering\" so that it doesn't crash if someone enters invalid data<br>3. New exercise -- Dice Wars!! (https://github.com/mkohlmann-he/DiceGame)<br><br>Personal Project (AI)<br>- - - - - - - - -<br>Discoveries:<br>file.readlines()<br>- There are several commands that read files. <br>- For the data structure I have in mind, I chose the readlines() command. (note the s, plural, that threw me for a loop for a while)<br>- It basically takes the file and converts it line by line into a list.<br>line.strip(\"\\n\")<br>- Using the readlines(), unfortunately it leaves the newline (\n) character at the end of each line, so I had to look up how to strip it.<br>- The command was: kbFileEntries = [line.strip(\"\\n\") for line in kbFile.readlines()]<br>- I still don't understand how it works, but I am trying to figure it out.<br>- to me, it almost seems like its a loop within brackets. Kind of a one-liner.<br>Completed:<br>1. Open file<br>2. Read file, and parse into a list, with knowledge base association per item<br>3. Loop through each association and parse into <br><br>Previous Exercise (PayCheck Calculator)<br>- - - - - - - - - <br>Discoveries:<br>while not Valid<br>- I searched google for a while on how to properly handle these. This strategy was the only one that I really understood.<br>- Basically it consists of a while loop is a flag pre-set to False:<br>- Then it asks the user for input<br>- Using ifs, it checks the entry to make sure it's valid (ie. .isdigit(), isn't None, etc.)<br>- If it fails, it's graceful enough to spit out an error message, and then the while loop asks for input again.<br>- If it passes, it sets the flag to True, and continues on, out of the loop.<br><br>New Exercise (Dice Game)<br>- - - - - - - - - <br>- I have a lot of the preliminary structure working.<br>- Storing my player info in a multi-dimentional list<br>- Storing my remaining available dice in a list-item within the list.<br>- The initialization of game (get player info, number of rounds, etc) is complete<br>- Next step, working on player selection of the dice, rolling the dice, and comparing for win/loss.<br>"
        },
        {
        "date":"6/4/2015",
		"title":"Looping and String Ops",
        "text":"Today we had two lectures, and worked on our Dice War game project.<br><br>Lectures were:<br>1. Looping<br>   - while <condition> : will continue to run and repeat while the condition is True<br>- break -- kicks you out of the loop, does not continue any more code in the loop and places you one line after the END of the loop<br>- continue -- restarts the loop, does not continue any more code, and places you and the START of the loop to run again<br><br>- for var in list/string/array or objects:<br>- var is actually an assignment, the for loop pulls each item out of the list, assigns it to var, then processes it.<br><br>- for <var> in range(start,stop):<br>- start/stop can be numbers, letters, or any series<br><br>- for var in [\"a\", x, y, 2, 24]<br>- the for loop will process each item in the list<br><br>2. String Ops<br>- covered some really interesting string ops like slicing String[start:stop], Strip (strip left side, right side, both), find, replace, etc.<br>- I won't cover them all, you can look them up pretty easy online. <br><br>Dice War Game:<br>- Added Scoring<br>- Added Tie-score decisions<br>- Added Turn control<br>- Added Full round control and scoring<br>- Added nice score board<br>- Added multiple players<br>- Added 3 bots (count up, count down, count random)<br><br>ToDo: Maybe add the ability to detect if all the players are bots (simulations) and ignore waiting for player inputs and delays set to 0.<br>"
        },
        {
        "date":"6/5/2015",
		"title":"DICE WARS!!",
        "text":"Today I finished my dice game. Fixed up some UI to make it look neat and polished (as polished as you can get with a command line game). I also added a simulation mode. It detects if all the players are bots, and if so, it will ignore any time delays and user input delays between rounds (so it just keeps looping through selection, roll, and scoring, until the end of game and just shows the end results).<br><br>Bug Fixes:<br>At the end of the round, if two players had the same score, it failed. It now makes them do a roll-off. Each of the tied players rolls a d20 and whoever wins gets the final point.<br><br><br>We also had a lecture on tips for google searching technical terms:<br> 1. Putting words in quotes (\"), google will look for the exact phrase.<br> 2. search terms site:url will search a specific site for the terms<br> 3. -keyword will exclude entries that contain the keyword<br> 4. +keyword will be identical to using the double quotes<br> 5. Asterics (*) is a wildcard, so \"happy * day\" would might find, birthday, or mothers day, etc.<br> 6. inurl:\"terms\" will find urls with the keywords in it.<br><br>google.com/landing/searchtips will give more tips<br>google doesnt really do boolean searches so AND/OR/NOT doesn't really work."
        },
        {
        "date":"6/8/2015",
		"title":"Objects",
        "text":"What is an Object? It can represent anything. A person, place, bank account, table...<br>It has Attributes or fields that store data.<br>It has Methods or functions that manipulate the data and do things.<br><br>Classes are like the imaginary prototype of the object. Human for example.<br>Then you instantiate the object as the individual. Bob = Human() for example.<br><br>The constructor: __init__() defines how it is created.<br>Inside the class, the self.whatever() reference is used as a way to reference the individual, rather than the class.<br><br>Attributes should should be private, within the class, and not accessible directly from outside the class.<br>Get-Set methods will allow you to access these attributes.<br>For example: <br>- andrew.fullname = \"Andrew Jones\" is wrong<br>- andrew.setFullName(\"Andrew Jones\") would be more appropriate.<br><br>You can store data within the class, that reference the entire class. <br>ie. __studentCount (not self._studentCount) might be used as a way to save processing time from iterating through all the students, just to get the count.<br><br>Note: Most methods have an implied self in the call.<br>ie. def get_age(self), but when you call it, it's only andrew.get_age() (note, no self between the brackets)<br><br>Encapsulation:<br>Black Box programming. You know what goes in, and what you expect to get back, but you don't need to know what happens within the object.<br><br>Inheritance:<br>A class can inherit attributes from a parent class.<br>ie. <br>class Animal:<br>class Cat(Animal):<br>class Dog(Animal):<br><br>Polymorphism:<br>A class can elegantly cope with different types of inputs. Like internally converting an int to a string, etc.<br><br><br>Best Practices:<br>Capitalize the name of the class.<br>Don't pluralize the name of the class. Keep it an individual.<br>you can inherit from more than one source but DO NOT DO IT! Bad practice. Can cause many errors.<br><br><br>And we have a new project. This one is also a game. It has 4 everyday objects, that fight. We have a granola bar, a notebook, a backpack and a computer. Fight to the DEATH!"
        }
	]
}