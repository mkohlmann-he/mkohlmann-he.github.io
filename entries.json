{"entries":[
{"date":"6/1/2015", "title":"First day of class", "text":"Tools used today:<br>Drop-Box -- Cloud storage for our programs and future work.<br>Portal.Microsoft.com -- All your typical MS programs. Word, Excel, Outlook.<br>MS Dreamsparks -- A copy of each of the MS programs. Like Winidows 7/8/10, Office, XNA, etc.<br>Stack Overflow.com -- Good source for Programming Q/A.<br>Git Hub -- Source control location with cloud repositories.<br>Notepad++ -- Programming editor. Uses a nice set of syntax coloring options for many languages.<br><br><br>Lab 1: Twitter Spam Bot Project Set-up:<br>To create a twitter development account<br>-Dev.twitter.com<br>-Standard user login (note: Need a valid email address and valid phone number on creation. Google Voice will work for this.)<br>-At the bottom of the dev page is a link called \"Manage Applications\"<br>-Create a new applications to get your authorization keys<br><br>Python/Twitter API - Tweepy:<br>New Command for me: PIP install Tweepy<br>I don't know much about the command yet but it ends up working a bit like Linux's Apt-Get repositories. I'm not sure if it functions exactly the same, but it has a simlar feel.<br><br>Twitter requires security keys before it will let a program post to the twitter account. These keys can be stored directly in the file, but if you put it on a public source control like Git Hub, people can skim these numbers.<br>A better solution is to put it in a separate python file, import it like any other import, and use a dictionary for the key look-up. Then DO NOT REVISION CONTROL this file. DON'T DO IT. Add it to git's ignore list. If you need to, but a blank key file into the repository so that anyone that forks it can understand how it works.<br><br>New Commands:<br>fileVar = open('filename.txt','r') # Opens as Read only. Locks the file so that new addition while the program are running, are not added.<br>fileVar.Close # Closes and releases the file for R/W again.<br>s = api.update_status(status = m, in_reply_to_statusid = tweet.id)<br><br><br><br>Lab 2: Git Set-up:<br>I think I finally have my head wrapped around it.<br>Best results I got from Building the Repo in Git-Hub first. Then CLONE/PULL the repo from Git-Hub, and it should load onto the the machine. Source Tree seemed to work the best for me. when I cloned it, it asked me where to save it.<br> <br> Each project should be it's own repository.<br> You should commit anytime you have solved a problem or come up with a good piece. You probably should not commit when something isn't working. Solve one problem. Commit, solve the next, commit, etc.<br> In collaboration with others, when you try to merge the files from two different users, it seems to work well - but sometimes you may have to manually edit and sort through it.<br> <br> Recommended procedure to try to prevent errors: 1. Commit my changes locally. 2. Pull Repository from the rest of the collective repository for everyone elses changes. 3. Push final changes up to the group repository.<br> <br> Git ignore file is a list of file extensions and specific files that Git will ignore during the commit/push process (like the twitter key example).<br> <br> New git command line Commands:<br> git init - starts the repository<br> git add - adds a file to repository<br> git status - self explanatory<br> git log - shows previous commits<br> git commit -m \"Comment\" - commits with a recorded message<br> git remote add origin <\"https:\ github repository\"> - Not sure. I think this one adds files to the git-hub repository, or else creates the git-hub repository<br> git push -u origin master - Pushes the repository to git-hub, -u remembers it as the default<br> git pull origin master - pulls the git-hub repository to local<br> git diff HEAD - checks the differences between the repository and staged, -HEAD shows the most recent commit. Seems to need to be capitalized<br> git diff --staged - shows changes in the staged area<br> git reset filename - rolls back a staged file<br> git checkout -- filename - recheckouts a file, overwriting the \"in-progress version\" (I think)<br> git branch - creates a branch<br> git branch - shows existing branches<br> git checkout - makes the other branch the active branch<br> git rm '*.txt' - deletes all the txt files (seems to follow linux commands)<br> git merge - merges the branch into the active branch<br> git branch -d - deletes a branch<br>"},
{"date":"6/2/2015", "title":"Programming Basics", "text":"New Tools we used today:<br>- iPython Notebook -- we use this to open up our labs and lessons for the day<br>- Notepad ++ -- Remember, change the Save-As file type to .py not default .txt<br><br>Book Sources:<br>- www.pythonlearn.com/book -- Community Commons licensed (free use, with acknowledgement) text book from UMichigan.<br><br>Best Practices:<br>- Print statements preferred to use the ()<br>- Also prefers to use Double Quote (\") over single quote.<br>- Obviously use comments, but you should code in such a way that you can tell whats going on, just by reading the code. Use MNemonic naming (ie. FirstNameofUser)<br>- Even if an equation doesnt need parenthesis, it is recommended that you put them in the way you want it processed, to clarify the code.<br><br>Discoveries:<br>- Lists have an automatic sort function list.sort(). <br>- it phisically modifies the list, rather than providing an output. So:<br>- print list.sort() returns None<br>* the correct form is:<br> - list.sort()<br> - print list<br><br>We did some testing today,<br>- Q: When does Python recognize when it needs to Float during an arithmetic operation? - A: As soon as it runs across a float: So...<br>- 4 / 5 - 5.0 = -5 (4/5 is integer match and truncates to 0)<br>- 4.0 / 5 - 5 = -.2 (because it converst it right away to float in the first operation)<br><br>I ran across this -- according to this website,<br>(http://www.mathcs.emory.edu/~valerie/courses/fall10/155/resources/op_precedence.html)<br>- when doing boolean logic, == comes before and/or<br>- so True and 1 == 0 is equivalent to [True and (1==0)].<br>- also And takes priority over Or<br>- So True and False or False is equivalent to [(True and False) or False]<br><br>New Concepts discussed today:<br>Variables:<br>- Variable name must start with a letter or underscore<br>- may also contain numbers, but cannot start with a number<br>- Remember that they are always case sensitive: Apple != apple<br><br>Assignments and expressions:<br>- x = 2 is an assignment because it just just a constant 2<br>- x = x+2 is an assignment with an expression<br><br>Some new operators:<br>- ** Python uses the double (*) for exponents<br>- % Python uses the % for modulus (remainder after division)<br>BEMA = Order of Operations is Brackets, Exponents, Multiplication (and division), Addition (and subtraction), Left to Right<br><br>New commands:<br>- type(variable) - return the variable type (ie. int, str, etc.)<br>- type casting - forcing the variable into another type. (ie. intVar = int(floatVar)) <br>-float(var)<br>-int(var)<br>-str(var)<br>- Note, if you try to cast something that can't be done, it will crash (see Try: Except:)<br>- answer = raw_input(\"Prompt\") - Prompt the user for input from the keyboard<br>Try/Catch (except in python):<br>- try: - Surround a block of dangers code with a try block. If an error occurs, it will run the Except instead.<br>- except: - this would be the block that gets run if it fails<br>- if an error occurs, the try: block will still be run, up until the point where it actually fails. <br>- In otherwords, it doesn't pre-process the try block. it runs like normal until it hits the error, and then runs the except block from there.<br>- In most other languagess, it is called Try:/Catch:<br><br>Conditional Execution:<br>- Remember \"==\" (double equal) is the if statement. \"=\" (single equal) is the assignment<br>- != is not equal<br>- if (condition test):<br>- everything in that if-block is indented after the the colon (:)<br>- remember its elif NOT ElseIf<br>- if: elif: else:"},
{"date":"6/3/2015", "title":"Python Projects", "text":"I worked on 3 main projects today. <br>1. Personal Project -- My first, built completely from scratch AI.(https://github.com/mkohlmann-he/AI_Test)<br>2. Previous exercise -- took my existing code and did some \"pre-filtering\" so that it doesn't crash if someone enters invalid data<br>3. New exercise -- Dice Wars!! (https://github.com/mkohlmann-he/DiceGame)<br><br>Personal Project (AI)<br>- - - - - - - - -<br>Discoveries:<br>file.readlines()<br>- There are several commands that read files. <br>- For the data structure I have in mind, I chose the readlines() command. (note the s, plural, that threw me for a loop for a while)<br>- It basically takes the file and converts it line by line into a list.<br>line.strip(\"\n\")<br>- Using the readlines(), unfortunately it leaves the newline ( ) character at the end of each line, so I had to look up how to strip it.<br>- The command was: kbFileEntries = [line.strip(\"\n\") for line in kbFile.readlines()]<br>- I still don't understand how it works, but I am trying to figure it out.<br>- to me, it almost seems like its a loop within brackets. Kind of a one-liner.<br>Completed:<br>1. Open file<br>2. Read file, and parse into a list, with knowledge base association per item<br>3. Loop through each association and parse into <br><br>Previous Exercise (PayCheck Calculator)<br>- - - - - - - - - <br>Discoveries:<br>while not Valid<br>- I searched google for a while on how to properly handle these. This strategy was the only one that I really understood.<br>- Basically it consists of a while loop is a flag pre-set to False:<br>- Then it asks the user for input<br>- Using ifs, it checks the entry to make sure it's valid (ie. .isdigit(), isn't None, etc.)<br>- If it fails, it's graceful enough to spit out an error message, and then the while loop asks for input again.<br>- If it passes, it sets the flag to True, and continues on, out of the loop.<br><br>New Exercise (Dice Game)<br>- - - - - - - - - <br>- I have a lot of the preliminary structure working.<br>- Storing my player info in a multi-dimentional list<br>- Storing my remaining available dice in a list-item within the list.<br>- The initialization of game (get player info, number of rounds, etc) is complete<br>- Next step, working on player selection of the dice, rolling the dice, and comparing for win/loss.<br>"},
{"date":"6/4/2015", "title":"Looping and String Ops", "text":"Today we had two lectures, and worked on our Dice War game project.<br><br>Lectures were:<br>1. Looping<br>   - while <condition> : will continue to run and repeat while the condition is True<br>- break -- kicks you out of the loop, does not continue any more code in the loop and places you one line after the END of the loop<br>- continue -- restarts the loop, does not continue any more code, and places you and the START of the loop to run again<br><br>- for var in list/string/array or objects:<br>- var is actually an assignment, the for loop pulls each item out of the list, assigns it to var, then processes it.<br><br>- for <var> in range(start,stop):<br>- start/stop can be numbers, letters, or any series<br><br>- for var in [\"a\", x, y, 2, 24]<br>- the for loop will process each item in the list<br><br>2. String Ops<br>- covered some really interesting string ops like slicing String[start:stop], Strip (strip left side, right side, both), find, replace, etc.<br>- I won't cover them all, you can look them up pretty easy online. <br><br>Dice War Game:<br>- Added Scoring<br>- Added Tie-score decisions<br>- Added Turn control<br>- Added Full round control and scoring<br>- Added nice score board<br>- Added multiple players<br>- Added 3 bots (count up, count down, count random)<br><br>ToDo: Maybe add the ability to detect if all the players are bots (simulations) and ignore waiting for player inputs and delays set to 0.<br>"},
{"date":"6/5/2015", "title":"DICE WARS!!", "text":"Today I finished my dice game. Fixed up some UI to make it look neat and polished (as polished as you can get with a command line game). I also added a simulation mode. It detects if all the players are bots, and if so, it will ignore any time delays and user input delays between rounds (so it just keeps looping through selection, roll, and scoring, until the end of game and just shows the end results).<br><br>Bug Fixes:<br>At the end of the round, if two players had the same score, it failed. It now makes them do a roll-off. Each of the tied players rolls a d20 and whoever wins gets the final point.<br><br><br>We also had a lecture on tips for google searching technical terms:<br> 1. Putting words in quotes (\"), google will look for the exact phrase.<br> 2. search terms site:url will search a specific site for the terms<br> 3. -keyword will exclude entries that contain the keyword<br> 4. +keyword will be identical to using the double quotes<br> 5. Asterics (*) is a wildcard, so \"happy * day\" would might find, birthday, or mothers day, etc.<br> 6. inurl:\"terms\" will find urls with the keywords in it.<br><br>google.com/landing/searchtips will give more tips<br>google doesnt really do boolean searches so AND/OR/NOT doesn't really work."},
{"date":"6/8/2015", "title":"Objects", "text":"What is an Object? It can represent anything. A person, place, bank account, table...<br>It has Attributes or fields that store data.<br>It has Methods or functions that manipulate the data and do things.<br><br>Classes are like the imaginary prototype of the object. Human for example.<br>Then you instantiate the object as the individual. Bob = Human() for example.<br><br>The constructor: __init__() defines how it is created.<br>Inside the class, the self.whatever() reference is used as a way to reference the individual, rather than the class.<br><br>Attributes should should be private, within the class, and not accessible directly from outside the class.<br>Get-Set methods will allow you to access these attributes.<br>For example: <br>- andrew.fullname = \"Andrew Jones\" is wrong<br>- andrew.setFullName(\"Andrew Jones\") would be more appropriate.<br><br>You can store data within the class, that reference the entire class. <br>ie. __studentCount (not self._studentCount) might be used as a way to save processing time from iterating through all the students, just to get the count.<br><br>Note: Most methods have an implied self in the call.<br>ie. def get_age(self), but when you call it, it's only andrew.get_age() (note, no self between the brackets)<br><br>Encapsulation:<br>Black Box programming. You know what goes in, and what you expect to get back, but you don't need to know what happens within the object.<br><br>Inheritance:<br>A class can inherit attributes from a parent class.<br>ie. <br>class Animal:<br>class Cat(Animal):<br>class Dog(Animal):<br><br>Polymorphism:<br>A class can elegantly cope with different types of inputs. Like internally converting an int to a string, etc.<br><br><br>Best Practices:<br>Capitalize the name of the class.<br>Don't pluralize the name of the class. Keep it an individual.<br>you can inherit from more than one source but DO NOT DO IT! Bad practice. Can cause many errors.<br><br><br>And we have a new project. This one is also a game. It has 4 everyday objects, that fight. We have a granola bar, a notebook, a backpack and a computer. Fight to the DEATH!"},
{"date":"6/9/2015", "title":"Binary", "text":"Binary basics:<br>We as humans count in base 10 (most likely because we have 10 fingers). What is excellent about base 10, is every digit is and additional power of 10. So 10^0=1, 10^1=10, 10^2=100, 10^3=1000, etc.<br><br>Computers can only think in 1's and 0's, so it uses binary, and Base 2. Everything is in the power of 2s, so, 2^0=1, 2^1=2, 2^3=4, 2^4=8, then 16, 32, 63, 128etc., the standard memory increments you see in computing.<br><br>To convert the binary to decimal, add up it's 2's component (remember LSB is on the right, MSB is on the left). So 11000101 = (128 + 64 + 4 + 1) or 197<br>Converting backwards, take the 2's component that best fits:<br>So, lets say starting number = 88:<br>88-64 leaves 24<br>24-16 leaves 8<br>8 - 8 leaves 0 and your done.<br>The binary equivalent would be 1011000.<br>(This would be a lot clearer if I knew how to format grids in HTML already. Maybe I'll come back to it when we cover that.)<br><br>0 = bit (b)<br>0000 = nibble<br>0000 0000 = byte (B)<br>1024 bytes = 1 kilobyte (kB)<br>1024 kilobytes = 1 megabyte (MB)<br>1024 MB = 1 gigabyte (GB)<br>Following this parttern, the next steps are:<br>Terrabyte (TB), or 1 million, million bytes<br>Petabyte<br>Exabyte<br>Zetabyte<br>Yottabyte<br><br>Internet terminology:<br>Note: Most carriers actually advertise in mega BITS per second. Not Bytes<br><br>Latency: the amount of time it takes for a bit to travel from point A to point B<br><br>Bandwidth: how many bits per second you can transfer<br><br>The difference is best described as a country road from Milwaukee, to Chicago. The latency is 2 hours, and you can get 1 car per second.<br><br>If you change it to a free-way, your latency is still 2 hours, but you can fit 2 or 3 cars side-by-side, so your bandwidth increaes.<br><br>The only way to change the latency would be to find a short cut between Milwaukee and Chicago.<br><br><br><br>Also, continued on the OhSHIT game we are developing as a team.<br>A couple of insights I had today:<br>1. To help with collisions one good strategy is to break the project into parts and files. Each person can work in their own file, and the main program can import them.<br>2. A good strategy for Git-Hub in multi-user is to first pull any changes from the shared repository. Check for conflicts, commit your changes back to your private git, then send out the pull request.<br>3. A helper macro within Git is -git remote add Short_Cut_Name Shared_Repository_URL<br>4. With that you can do -git pull ShortCut master, to quickly pull the master git off the shared repository.<br>"},
{"date":"6/10/2015", "title":"Personal Projects", "text":"Personal Projects:<br>------------------<br>We finished our OhSHIT game today after some debugging, and group test-play. There is still a lot of polish that can be done to the UI, but as an engine, it is working properly as we expect. Professors have called it complete. I may revisit it later, if I have time, to polish it up for a portfolio project.<br><br>In the afternoon, we started new personal projects of our choice. We have roughly 24 hours to finish it. Details of my project below.<br><br>Time Tracker:<br>1. This will be a desktop widgit, possibly with a pin to keep it in front of other applications.<br><br>2. It's purpose is to allow the user to quickly log what projects they work on through out the day, and what tasks.<br><br>3. It contains a simple interface, select a project, give it a task comment (ie. working of file sharing function), Push the start button.<br><br>4. In the back ground, the timer starts up. If the user wants to pause the timer (ie. coffee break), it will stop the timer, and start it back up when they return.<br><br>5. At the end of the task, or whenever they want to change the comment, they can push the Stop button, at which point it will finalize the cumulative time, and log the entry into a tab delimited text file (tab was chosen, on the off chance the user enters comments with commas in them).<br><br>Today, I completed the main data entry class, and logging of the entries into the text file. Works well. I think this is actually doable in the 24 hours (though I still have to research the GUI). Going through the wxPython library tutorial this afternoon. Tomorrow morning, I will try to implement it with my project.<br>"},
{"date":"6/11/2015", "title":"Personal Projects", "text":"Personal Projects:<br>------------------<br>Pretty Straightforward day. Finished up the personal project, and finishing up the functionality and GUI. The GUI itself was quite a learning process. The GUI page became my Main Loop, because as part of the GUI, it becomes an Event Handler. It continuously loops, looking for events then triggers functions or other methods.<br><br>With that worked out, I imported my Data Entry class that I worked on yesterday, and had it trigger the stop-watch start/stop/pause functions, and the export to text file functions.<br><br> I consider iteration 1 complete. I am now doing some self-study on connecting python to Databases. The instructors think that MySQL is a good solution, and my own research tends to agree with that.<br><br> I found some tutorials online and said a very common tool-chain for webservers is LAMP (Linux, Apache, MySQL, and PHP). I think if I start down this path, it can only help me in the future. If I decide to change DB packages later, the work I put into MySQL will still be relevant."},
{"date":"6/12/2015", "title":"Lemonade Stand", "text":"Coding Challenge:<br>------------------<br>Today, I worked more on my personal project, adding some more MySQL database functionality. I was able to get it connect, Save, and read entries. In the afternoon we worked on a coding challenge. We have until the end of the day to completely write the game Lemonade Stand from scratch. If we don't finish we have homework, we have to finish the program and present it on Monday Morning. So far, it's not looking good..."},
{"date":"6/15/2015", "title":"Pygame", "text":"Pygame Library:<br>------------------<br>I did pretty good over the weekend. I was the only one to completely finish the Lemonade Stand coding challenge. It took me most of Saturday, but still, did better than anyone else.<br><br>Today we have a new challenge. One student becomes the project manager. Together we work as a team to build a clone of the Asteroids game.<br><br>We are using the pygame library to quickly develop our user interface. It is surprising how quick and simple it is to develop with it. Of course, at it's base, Asteroids is a pretty simple game. During the first hour or two of our research time I was able to read keyboard inputs, and control the bouncing motion of a ball on the screen, print a high score, etc.<br><br>Really pretty amazing stuff.<br><br>For the project, my assignment is the main game engine design. Others are in charge of the graphics engine, and the classes for the asteroids and space ship. For my part, its actually pretty easy. Read the inputs, signal the ship and asteroids to increment their motion, and send everything to the graphics engine for display."},
{"date":"6/16/2015", "title":"Agile Workflow", "text":"Pygame:<br>------------------<br>Today we continued on our Asteroids clone. We integrated the Ship class file, and the Graphics engine into it. I worked on adding the \"Shoot the Laser!\" functionality by creating a bullet class. It gets processed like any other object, though the graphics engine. I also added the functionality that when the bullet moves off screen it gets removed from the object list, to save memory and processing time.<br><br>On a side note: after doing more research on pygame sprites there is a lot of functionality prebuilt into the sprite class. If I would have known that, I think I would have designed the main engine differently in order to utilize these pre-built functions (collision detection, display, time increment updating for motion... lots of stuff that I designed into the engine from scratch).<br><br><br>Agile Workflow:<br>------------------<br>Today we also had a lecture on Agile workflow, covering first the Waterfall workflow, and moving how it differs from Agile. Multiple, but shorter, design cycles with a small set of features for the customer to test after each sprint. We discussed the general topics of 'Story Time', 'Kickoff', 'Development', 'Retrospective', and the daily scrums. We discussed the general topics of 'Epics', 'Themes', and 'Tasks' with regards to the 'User Stories'. Finally, we talked about the Agile Triangle, and who is responsible for the 'Value to Customer', 'Quality of Product', and 'Constraints'. Overall, I think it was a pretty excellent crash course in Agile. I have heard the term several times before, but I wasn't really aware of what was all involved. It's one of those catch-phrases you hear, that everyone talks about, but has a slightly different variation of how it's implemented."},
{"date":"6/17/2015", "title":"Better Git Hub Management", "text":"GitHub-SourceTree:<br>------------------<br>Today started out EXTREMELY frustrating. We had some major problems with our revision management strategy. Somehow, one of us, and we aren't sure who, overwrote some files, and we lost quite a bit of work. We also got into a bit of a corrupted Git repository problem where I couldn't commit because I couldn't pull, and I couldn't pull, because it was stuck in a commit. Eventually I had to blow out my entire local repository and pull from the main group repository again.<br><br>In the end one of our instructors showed us a MUUUUCH better method of using a group repository in Source Tree. We all become contributors to the one group repository and push and pull individual files, rather than have a single repository administrator that has to worry about all the different merges. It worked, WAY better. I feel so much more relaxed than my stressed out state this morning.<br><br>By the end of the day, we rebuilt everything we lost and advanced even further. The asteroid class is finally finished and inserted into the game. Bullets are added in, and we have collision detection with the bullets and asteroids and they properly pop out of existence. Tomorrow my goal is to work on the end of game conditions, while the other guys work on scoring, and the ship crashing into the asteroid, and loosing lives. For such a crappy start, the ending was fantastic."},
{"date":"6/18/2015", "title":"Asteroids continued", "text":"Adding more functionality:<br>------------------<br>Today was another good day. We added a lot of functionality to the game. I added an explosions class, which is just a object to show the explosion animation. It takes a time, frame-rate, and number of images in your animation and splits the images up evenly across the play-time. Also added the end of game functionality, with displaying the high scores. We made it a little fancy, so that in the background, the asteroids keep flying around, as if the game were still playing. This took some work to modify the controls, and screen, to ignore the player inputs for 2 seconds. After 2 seconds, any keyboard press will dump you back to the starting splash screen.<br><br>By the afternoon, we had a fully working game worthy of being a completed game. We discussed and took on several ad-on options and had about 24 hours to complete. Tomorrow we are done with Python and move onto Javascript.<br><br>The add-ons we took on were an options screen, and player powerups. We took an extra life power-up, a Bullet powerup, and a shield powerup. We will see if we can finish in time..."},
{"date":"6/19/2015", "title":"Asteroids continued(2)", "text":"Power-ups and field trips:<br>------------------<br>We finished our game completely by noon, with just minutes to spare. We had to modify the bullet class, and ship class to take on the added functionality. Also, the display functions and the main game engine had to me modified to accomodate the graphics changes and to spawn the larger wave-like bullets.<br><br>This afternooon we visited PKWARE who are probably most famous for creating PK-Zip which is our modern Zip files of today. Their new projects are focused on client side encryption, so that you can take a file, and encrypt it, then harmlessly push that file anywhere, say to drop-box or anywhere. If the file is intercepted in transit or stolen from a server, it is still safe and secure. Really interesting stuff. It seemed like a pretty cool work envirnment as well, with an open concept, sit/stand adjustable desks, and ping-pong/pool table in the break room. I know not all offices are this way, but I wouldn't mind working in a place like that. It would be a nice change from my old cubicles."},
{"date":"6/22/2015", "title":"Javascript", "text":"Quarter mark:<br>------------------<br>Good lord, we are a quarter of the way done already.<br><br>Today starts new topics. Python is done, and Web front-end is king of the realm.<br><br>HTML: Hypertext markup language. By itself is pretty straight forward. It is basically the content (minus the style) of what a web page looks like. If you wanted to, you could embed the sheet style codes directly into the HTML, but it would look very cluttered. It uses tag, like P, BODY, and HEAD to define portions of the screen.<br><br>CSS: Cascading Sheet Style. Controls the style of the page. How objects look. It's called cascading because you have the option of overwriting the default styles at a lower level. (ie. Main Page, to Body, to Table, to Row... at anypoint, you can overwrite the higher order level.) CSS would cover things like color, cell spacing, borders, etc.<br><br>Javascript: This is the logic of the web page. It is all (mostly) client side logic. It doesn't let you access the peripherals, or the file system. It just lets you access the browser display. Like CSS, you can run javascript either in-line, or embedded into the main file, or linked in an external file. Even though it's somewhat limited, there is still some pretty cool stuff you can do. I look forward to learning more about it in the next few weeks."},
{"date":"6/23/2015", "title":"Javascript Day 2", "text":"Objects and Functions:<br>------------------<br>So, 15+ years ago when I was first introduced to Javascript, it felt like it wasn't a real programming language. It was just something to tweak and add a little functionality to the HTML. Today, Javascript feels like a real language. I'm not sure how deep it can go, but it really is almost on-par with Python in terms of funcionality. from what I've seen, the few things it doesn't do out of the box is accessing things like file storage (obviously), and to seems like python has better user interface in terms of graphics, keyboard inputs, etc.<br><br>We also introduce real for-loops, boolean tertiary statements, date functions. My problem going forward is going to be remembering semi-colons after each line."},
{"date":"6/24/2015", "title":"Javascript Day 3", "text":"Javascript Forms:<br>------------------<br>Javascript has the same forms that they had 10 years ago, (text boxes, buttons, etc), but jQuery added a ton of functionality like the ability to recognize clicks on things other than buttons (example: hide a div when you just click on the raw text within it). jQuery also makes it easier to acess the objects on the page with .text .val(). It doesn't need to be just a text box. You can create and display HTML, forms, buttons, anything on the fly."},
{"date":"6/25/2015", "title":"Javascript Day 4", "text":"Updating the Blog:<br>------------------<br>Today we are updating our blog to add a lot of new functionality. The things we need to add is a way to read out blogs from the JSON file into our homepage and display it. jQueries .getJSON() function runs asynchronously, so you have to accomodate for this. If you need to use the data at anypoint (ie. to display our blog) you need to wait for the read to finish, because otherwise your javascript will just keep running without realizing it hasn't been read yet. You could just use a timeout timer, but to do it properly you should wait for the JSON.complete flag, as a trigger for other events.<br><br>In addition to reading the blog, we need to split it (the instructors are calling it pagination?) into sections of 5 pages. Finally, we need to be able to search through all the blogs and display only the blogs that match our search field. In addition we need to add some animations to hide the main homepage when we start searching, and only show our search results."},
{"date":"6/26/2015", "title":"Javascript Day 5", "text":"SUCCESS!!:<br>------------------<br>Finally, got the all the search functionallity and hide-show requirements in the Lab. It actually looks really cool, and responds really well. It is amazing how far HTML/Javascript advanced in the past 10 years. What used to require Adobe Flash can now be done in basic HTML5, CSS, and jquery, out of the box, for free. I am literally speachless."},
]}